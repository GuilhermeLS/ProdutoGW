trigger:
- develop  

pool:
  vmImage: 'ubuntu-latest'  

variables:
  solution: '**/ProdutoGW.sln' 
  buildConfiguration: 'Release'  
  buildPlatform: 'Any CPU'  
  buildOutput: '$(Build.ArtifactStagingDirectory)'  
  dbConnectionString: 'Server=localhost\\SQLEXPRESS;Database=ProdutoDB;User Id=sa;Password=xpto@123;TrustServerCertificate=True'  
  testResultsDirectory: '$(Build.SourcesDirectory)/TestResults'  # Diretório para os resultados dos testes

jobs:
- job: BuildTestPublish
  displayName: "Build, Test and Publish"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    # Instalar o SDK do .NET
    - task: UseDotNet@2
      displayName: "Instalar SDK do .NET"
      inputs:
        packageType: sdk
        version: '7.0'  # Ajustar conforme versão do .NET usada no projeto
        installationPath: $(Agent.ToolsDirectory)/dotnet

    # Restaurar dependências
    - task: DotNetCoreCLI@2
      displayName: "Restaurar dependências"
      inputs:
        command: 'restore'
        projects: '$(solution)'

    # Compilar o projeto
    - task: DotNetCoreCLI@2
      displayName: "Compilar solução"
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    # Executar testes unitários
    - task: DotNetCoreCLI@2
      displayName: "Executar testes unitários"
      inputs:
        command: 'test'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --no-build --logger trx --results-directory $(testResultsDirectory)'

    # Publicar os resultados dos testes unitários
    - task: PublishTestResults@2
      displayName: "Publicar resultados dos testes unitários"
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        searchFolder: '$(testResultsDirectory)'

    # Executar testes de integração
    - task: DotNetCoreCLI@2
      displayName: "Executar testes de integração"
      inputs:
        command: 'test'
        projects: '**/ProdutoGW.IntegrationTests/ProdutoGW.IntegrationTests.csproj'  
        arguments: '--configuration $(buildConfiguration) --no-build --logger trx --results-directory $(testResultsDirectory)'
      env:
        ASPNETCORE_ENVIRONMENT: 'Integration' 
        ConnectionStrings__DefaultConnection: '$(dbConnectionString)'  

    # Publicar os resultados dos testes de integração
    - task: PublishTestResults@2
      displayName: "Publicar resultados dos testes de integração"
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        searchFolder: '$(testResultsDirectory)'

    # Publicar os artefatos
    - task: DotNetCoreCLI@2
      displayName: "Publicar artefatos"
      inputs:
        command: 'publish'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --output $(buildOutput) --no-build'

    - task: PublishPipelineArtifact@1
      displayName: "Publicar artefatos no pipeline"
      inputs:
        targetPath: '$(buildOutput)'
        artifact: 'drop'
        publishLocation: 'pipeline'

    # Exemplo de etapas de Docker (opcional)
    # - task: Docker@2
    #   displayName: "Build da imagem Docker"
    #   inputs:
    #     command: 'buildAndPush'
    #     repository: 'produto-repo'
    #     dockerfile: '$(Build.SourcesDirectory)/ProdutoGW.API/Dockerfile'
    #     tags: '$(Build.BuildId)'
    #     containerRegistry: 'yourRegistryName'
    #     buildContext: '$(Build.SourcesDirectory)/ProdutoGW.API'
